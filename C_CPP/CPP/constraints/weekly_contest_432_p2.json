{
    "fuzzing_params": {
        "Constraints": "m == coins.length, n == coins[i].length, 1 <= m, n <= 500, -1000 <= coins[i][j] <= 1000",
        "runs": 20
    },
    "problem_info": {
        "contest": "Weekly Contest 432",
        "problem_number": 2,
        "title": "3418. Maximum Amount of Money Robot Can Earn",
        "difficulty": "Medium",
        "source_url": "https://leetcode.com/problems/maximum-amount-of-money-robot-can-earn/",
        "tags": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "test_examples": [
            "Example 1:  Input: coins = [[0,1,-1],[1,-2,3],[2,-3,4]]  Output: 8  Explanation:  An optimal path for maximum coins is:  Start at (0, 0) with 0 coins (total coins = 0).  Move to (0, 1), gaining 1 coin (total coins = 0 + 1 = 1).  Move to (1, 1), where there's a robber stealing 2 coins. The robot uses one neutralization here, avoiding the robbery (total coins = 1).  Move to (1, 2), gaining 3 coins (total coins = 1 + 3 = 4).  Move to (2, 2), gaining 4 coins (total coins = 4 + 4 = 8).",
            "Example 2:  Input: coins = [[10,10,10],[10,10,10]]  Output: 40  Explanation:  An optimal path for maximum coins is:  Start at (0, 0) with 10 coins (total coins = 10).  Move to (0, 1), gaining 10 coins (total coins = 10 + 10 = 20).  Move to (0, 2), gaining another 10 coins (total coins = 20 + 10 = 30).  Move to (1, 2), gaining the final 10 coins (total coins = 30 + 10 = 40)."
        ]
    }
}